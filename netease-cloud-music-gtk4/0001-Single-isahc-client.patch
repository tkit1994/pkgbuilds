From f52ef50111b445bb8bad2d54bb08aaa0564c05e1 Mon Sep 17 00:00:00 2001
From: catsout <outline941@live.com>
Date: Tue, 15 Nov 2022 08:04:50 +0800
Subject: [PATCH 1/2] Single isahc client

---
 src/application.rs | 35 +++++++++++++++++++++++++++--------
 src/ncmapi.rs      | 41 ++++++++++++++++-------------------------
 2 files changed, 43 insertions(+), 33 deletions(-)

diff --git a/src/application.rs b/src/application.rs
index b11bb77..6cda476 100644
--- a/src/application.rs
+++ b/src/application.rs
@@ -131,6 +131,7 @@ mod imp {
         pub sender: Sender<Action>,
         pub receiver: RefCell<Option<Receiver<Action>>>,
         pub unikey: Arc<RwLock<String>>,
+        pub ncmapi: RefCell<Option<NcmClient>>,
     }
 
     #[glib::object_subclass]
@@ -143,12 +144,14 @@ mod imp {
             let receiver = RefCell::new(Some(r));
             let window = OnceCell::new();
             let unikey = Arc::new(RwLock::new(String::new()));
+            let ncmapi = RefCell::new(None);
 
             Self {
                 window,
                 sender,
                 receiver,
                 unikey,
+                ncmapi,
             }
         }
     }
@@ -237,13 +240,23 @@ impl NeteaseCloudMusicGtk4Application {
         }
 
         let window = imp.window.get().unwrap().upgrade().unwrap();
-        let mut ncmapi = self.init_ncmapi(NcmClient::new());
+        let ncmapi = {
+            let ncmapi_opt = { imp.ncmapi.borrow().as_ref().cloned() };
+            if let Some(ncmapi) = ncmapi_opt {
+                ncmapi
+            } else {
+                let ncmapi = self.init_ncmapi(NcmClient::new());
+                imp.ncmapi.replace(Some(ncmapi.clone()));
+                ncmapi
+            }
+        };
 
         match action {
             Action::CheckLogin(user_menu, logined_cookie_jar) => {
                 let sender = imp.sender.clone();
                 let ctx = glib::MainContext::default();
-                ncmapi = self.init_ncmapi(NcmClient::from_cookie_jar(logined_cookie_jar));
+                let ncmapi = self.init_ncmapi(NcmClient::from_cookie_jar(logined_cookie_jar));
+                let s = self.clone();
 
                 ctx.spawn_local(async move {
                     if !window.is_logined() {
@@ -251,8 +264,8 @@ impl NeteaseCloudMusicGtk4Application {
                             debug!("获取用户信息成功: {:?}", login_info);
                             window.set_uid(login_info.uid);
 
-                            ncmapi.set_cookie_jar_to_global();
-                            ncmapi.save_global_cookie_jar_to_file();
+                            ncmapi.save_cookie_jar_to_file();
+                            s.imp().ncmapi.replace(Some(ncmapi));
 
                             sender
                                 .send(Action::InitUserInfo(login_info.to_owned()))
@@ -269,17 +282,22 @@ impl NeteaseCloudMusicGtk4Application {
                             sender
                                 .send(Action::AddToast(gettext("Login failed!")))
                                 .unwrap();
-                            NcmClient::clean_global_cookie_jar_and_file();
+
+                            s.imp().ncmapi.replace(None);
+                            NcmClient::clean_cookie_file();
                         }
                     }
                 });
             }
             Action::Logout => {
                 let sender = imp.sender.clone();
+                let s = self.clone();
                 let ctx = glib::MainContext::default();
                 ctx.spawn_local(async move {
                     ncmapi.client.logout().await;
-                    NcmClient::clean_global_cookie_jar_and_file();
+
+                    s.imp().ncmapi.replace(None);
+                    NcmClient::clean_cookie_file();
 
                     window.logout();
                     window.switch_my_page_to_logout();
@@ -610,9 +628,10 @@ impl NeteaseCloudMusicGtk4Application {
                 if !path.exists() {
                     let ctx = glib::MainContext::default();
                     ctx.spawn_local(async move {
-                        ncmapi.set_rate(music_rate);
                         if song_info.song_url.is_empty() {
-                            if let Ok(song_url) = ncmapi.songs_url(&[song_info.id]).await {
+                            if let Ok(song_url) =
+                                ncmapi.songs_url(&[song_info.id], music_rate).await
+                            {
                                 debug!("获取歌曲播放链接: {:?}", song_url);
                                 if let Some(song_url) = song_url.get(0) {
                                     let song_info = SongInfo {
diff --git a/src/ncmapi.rs b/src/ncmapi.rs
index b4e6276..54d45a2 100644
--- a/src/ncmapi.rs
+++ b/src/ncmapi.rs
@@ -6,14 +6,13 @@
 use anyhow::Result;
 use cookie_store::CookieStore;
 use ncm_api::{CookieBuilder, CookieJar, MusicApi, SongUrl};
-use once_cell::sync::OnceCell;
 
 use crate::path::CACHE;
 use log::error;
 use std::{fs, io, path::PathBuf};
 
 const COOKIE_FILE: &str = "cookies.json";
-static COOKIE_JAR: OnceCell<CookieJar> = OnceCell::new();
+const MAX_CONS: usize = 32;
 
 pub const BASE_URL_LIST: [&str; 12] = [
     "https://music.163.com/",
@@ -30,29 +29,21 @@ pub const BASE_URL_LIST: [&str; 12] = [
     "https://music.163.com/openapi/clientlog",
 ];
 
+#[derive(Clone)]
 pub struct NcmClient {
     pub client: MusicApi,
-    rate: u32,
 }
 
 impl NcmClient {
-    const DEFAULT_RATE: u32 = 320000;
-
     pub fn new() -> Self {
-        if let Some(global_cookie_jar) = COOKIE_JAR.get() {
-            Self::from_cookie_jar(global_cookie_jar.to_owned())
-        } else {
-            Self {
-                client: MusicApi::new(),
-                rate: Self::DEFAULT_RATE,
-            }
+        Self {
+            client: MusicApi::new(MAX_CONS),
         }
     }
 
     pub fn from_cookie_jar(cookie_jar: CookieJar) -> Self {
         Self {
-            client: MusicApi::from_cookie_jar(cookie_jar),
-            rate: Self::DEFAULT_RATE,
+            client: MusicApi::from_cookie_jar(cookie_jar, MAX_CONS),
         }
     }
 
@@ -60,18 +51,18 @@ impl NcmClient {
         self.client.set_proxy(&proxy)
     }
 
-    pub fn set_rate(&mut self, item: u32) {
-        let rate = match item {
+    pub fn get_api_rate(item: u32) -> u32 {
+        match item {
             0 => 128000,
             1 => 192000,
             2 => 320000,
             3 => 999000,
             4 => 1900000,
             _ => 320000,
-        };
-        self.rate = rate;
+        }
     }
 
+    /*
     pub fn set_cookie_jar_to_global(&self) {
         if let Some(cookie_jar) = self.client.cookie_jar() {
             match COOKIE_JAR.get() {
@@ -89,6 +80,7 @@ impl NcmClient {
             }
         }
     }
+    */
 
     pub fn cookie_file_path() -> PathBuf {
         crate::path::DATA.clone().join(COOKIE_FILE)
@@ -122,7 +114,7 @@ impl NcmClient {
         None
     }
 
-    pub fn save_global_cookie_jar_to_file(&self) {
+    pub fn save_cookie_jar_to_file(&self) {
         if let Some(cookie_jar) = self.client.cookie_jar() {
             match fs::File::create(&Self::cookie_file_path()) {
                 Err(err) => error!("{:?}", err),
@@ -151,10 +143,7 @@ impl NcmClient {
         }
     }
 
-    pub fn clean_global_cookie_jar_and_file() {
-        if let Some(cookie_jar) = COOKIE_JAR.get() {
-            cookie_jar.clear();
-        }
+    pub fn clean_cookie_file() {
         if let Err(err) = fs::remove_file(&crate::path::DATA.clone().join(COOKIE_FILE)) {
             match err.kind() {
                 io::ErrorKind::NotFound => (),
@@ -171,8 +160,10 @@ impl NcmClient {
         Ok((path, qrinfo.1))
     }
 
-    pub async fn songs_url(&self, ids: &[u64]) -> Result<Vec<SongUrl>> {
-        self.client.songs_url(ids, &self.rate.to_string()).await
+    pub async fn songs_url(&self, ids: &[u64], rate: u32) -> Result<Vec<SongUrl>> {
+        self.client
+            .songs_url(ids, &Self::get_api_rate(rate).to_string())
+            .await
     }
 
     pub async fn get_lyrics(&self, id: u64) -> Result<String> {
-- 
2.38.1

